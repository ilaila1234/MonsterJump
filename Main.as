package {		import flash.display.MovieClip;	import flash.events.*;	import flash.ui.Keyboard;	import flash.display.Stage;			public class Main extends MovieClip {				public var playerMC:MovieClip;		public var platformContainerMC:MovieClip;		public var pausedBackgroundMC:MovieClip;		//public var game:MovieClip;		private var _pauseAndPlayButtonMC:MovieClip;		private var _stageWidth = 400;		private var _stageHeight = 600;		private var _screenOffsetOnYAxis:Number = 0;		private var _stageReference:Stage = stage;		private var _yMouseDistance:Number;		private var _xMouseDistance:Number;		private var _isPaused:Boolean;				public function Main() {						playerMC = new PlayerMC();			platformContainerMC = new PlatformContainerMC();			pausedBackgroundMC = new PausedBackgroundMC();			_pauseAndPlayButtonMC = new PauseButtonMC();			//game = new GameBoundaryMC();						//addChild(game);						/*game.addChild(platformContainerMC);			game.addChild(playerMC);			game.addChild(_pauseAndPlayButtonMC);*/						addChild(platformContainerMC);			addChild(playerMC);			platformContainerMC.addChild(_pauseAndPlayButtonMC);							_pauseAndPlayButtonMC.x = _stageWidth - 15;			_pauseAndPlayButtonMC.y = 5;			resetGame();					platformContainerMC.initialisePlatforms(playerMC.collisionAreaMC);						//addEventListener(Event.ENTER_FRAME, moveCharacterAndDetectCollisions);			//addEventListener(Event.ENTER_FRAME, movePlatformContainer);			//addEventListener(Event.ENTER_FRAME, manageGameBoundaries);						addEventListener(Event.ENTER_FRAME, tick);						stage.addEventListener(KeyboardEvent.KEY_DOWN,addKey);			stage.addEventListener(KeyboardEvent.KEY_UP,removeKey);			stage.addEventListener(KeyboardEvent.KEY_DOWN, addMouseListener);			stage.addEventListener(KeyboardEvent.KEY_UP, removeMouseListener);						_pauseAndPlayButtonMC.addEventListener(MouseEvent.MOUSE_UP, pauseGame);						trace("Main constructed");		}				public function tick(event:Event):void {			movePlatformContainer();			manageGameBoundaries();			playerMC.jump();			playerMC.accelerate();			detectCollisions();			//trace("playerMC.y is " + playerMC.y);		}				public function pauseGame(event:MouseEvent) {			if (_isPaused) {				_pauseAndPlayButtonMC.gotoAndStop("Pause");				_isPaused = false;				addChild(playerMC);				removeChild(pausedBackgroundMC);			}			else {				platformContainerMC.removeChild(_pauseAndPlayButtonMC);				_isPaused = true;				removeChild(playerMC);				addChild(pausedBackgroundMC);				addChild(_pauseAndPlayButtonMC);				_pauseAndPlayButtonMC.gotoAndStop("Play");			}		}				public function addKey(event:KeyboardEvent):void {			playerMC.keysDown[event.keyCode]=true;		}				public function removeKey(event:KeyboardEvent):void {			playerMC.keysDown[event.keyCode]=false;		}				public function addMouseListener(event:KeyboardEvent):void {			if (event.keyCode == Keyboard.SHIFT)			{				addEventListener(Event.ENTER_FRAME, handleMouseMovements);			}		}				public function removeMouseListener(event:KeyboardEvent):void {			if (event.keyCode == Keyboard.SHIFT)			{				playerMC.keysDown[Keyboard.UP]=false;				playerMC.keysDown[Keyboard.LEFT]=false;				playerMC.keysDown[Keyboard.RIGHT]=false;				removeEventListener(Event.ENTER_FRAME, handleMouseMovements);			}		}				public function handleMouseMovements(event:Event):void {						_yMouseDistance = stage.mouseY - playerMC.y;			_xMouseDistance = stage.mouseX - playerMC.x;						if (_yMouseDistance < -10) {				playerMC.keysDown[Keyboard.UP]=true;			}			else {				playerMC.keysDown[Keyboard.UP]=false;			}						if (_xMouseDistance < -10) {								playerMC.keysDown[Keyboard.LEFT]=true;				playerMC.keysDown[Keyboard.RIGHT]=false;			}			else if (_xMouseDistance > 10) {				playerMC.keysDown[Keyboard.LEFT]=false;				playerMC.keysDown[Keyboard.RIGHT]=true;						}			else {				playerMC.keysDown[Keyboard.LEFT]=false;				playerMC.keysDown[Keyboard.RIGHT]=false;			}		}				public function detectCollisions():void {						// On every frame this function is called to cycle through all of the platformMC instances			// which are children of the platformContainerMC						for (var i:int = 0; i < platformContainerMC.numChildren;i ++) 			{				// this for loop cycles through the number of children the platformContainerMC has				var child = platformContainerMC.getChildAt(i);								if (child.hasOwnProperty("collisionArea")) 				{					// if the child of the platformContainerMC has a property of collision area then forms this check					if(child.collisionTest() && playerMC.jumpState!="going up" && playerMC.isOffScreen != true) {					// the condition for landing on a platform is this:						// there is a collision with the child element AND						// the playerMC is not jumping up (as the player can jump through platforms when on the way up) AND						// and the player can't be off the top of the screen. If they are, we don't want them to land						// on unseen platforms above the top of the stage.																		playerMC.y = child.y - playerMC.height + 5.45 + _screenOffsetOnYAxis;							// the playerMC's y position is now the y position of the child							// minus the height of the character							// plus the value 5.45 (which allows for the hairy feet)							// plus the screen offset which comes from 							trace(playerMC.y);							trace(child.y);							playerMC.stopJumping();					}					else {											}				}			}					}				public function movePlatformContainer():void {			if (playerMC.y < (_stageHeight / 2)) {				if(playerMC.yVelocity > 0) {										//_screenOffsetOnYAxis = (_stageHeight / 2) - playerMC.y;					//_screenOffsetOnYAxis =+ (_stageHeight / 2) - playerMC.y;					//_screenOffsetOnYAxis += 2.5;					//platformContainerMC.y += _screenOffsetOnYAxis;					//playerMC.y += playerMC.yVelocity;					//trace("playerMC.y is " + playerMC.y);					//trace("yVelocity is " + playerMC.yVelocity);								for (var i:int = 0; i < platformContainerMC.numChildren;i ++) 			{				// this for loop cycles through the number of children the platformContainerMC has				var child = platformContainerMC.getChildAt(i);								if (child.hasOwnProperty("collisionArea")) 				{					// if the child of the platformContainerMC has a property of collision area then it is a platform					// move all the actual platforms at the rate of the yVelocity														child.y += playerMC.yVelocity;																	}								}			}			}		}									public function manageGameBoundaries():void {			if (playerMC.x > _stageWidth) {				trace(playerMC.x + "is greater than stage.width");				playerMC.x -= _stageWidth;			}						if (playerMC.x < 0) {				trace(playerMC.x + "is less than 0");				playerMC.x += _stageWidth;			}						if (playerMC.y > _stageHeight) {								trace("Dead");				resetGame();			}			if (playerMC.y < -40) {				playerMC.isOffScreen = true;							}			if (playerMC.y > -40) {				playerMC.isOffScreen = false;			}					}				public function resetGame():void {			playerMC.stopJumping();			playerMC.x = 200;			playerMC.y = 400;			//platformContainerMC.y = 0;			// TO DO - find a way to reset this			_isPaused = false;		}			}		}