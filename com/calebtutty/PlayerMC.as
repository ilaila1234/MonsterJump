package com.calebtutty {		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.ui.Keyboard;		public class PlayerMC extends MovieClip {				//public var ground:Number;		public var keysDown:Array=[];		// an Array? Yes. Because of that pesky keyboard buffer.		public var yVelocity:Number=0;		// initialise the yVelocity. It's public because specials play with it		public var jumpState:String;		// jumpState - what state it is in. Used for jumping through platforms											// on the way up, but not on the way down.		public var isOffScreen:Boolean;		// if the player gets off screen it's either dead or left/right/ up				private var _isDead:Boolean=false;			// has an accessor.													// Convention used: private variables with accessor methods													// are prefixed with an underscore				private var xVelocity:Number=0;		private var accelleration:Number=1.5;		private var maxYAccelleration:Number = 15;		private var minYAccelleration:Number = -15;		private var friction:Number=0.5;		private var maxVelocity:Number=5;		private var maxReverseVelocity:Number=-5;		private var yAccelleration:Number=25		private var gravity:Number=1.25;		private var jumping:Boolean=false;		public function PlayerMC() {						trace("PlayerMC Constructed");						jumpState = "still";			isOffScreen = false;													}				public function reset()		{			jumpState = "still";			isOffScreen = false;			isDead = false;			gotoAndStop("Normal");		}							public function accelerate():void {			this.x+=xVelocity;			if ((keysDown[Keyboard.RIGHT])&&(xVelocity < maxVelocity)) 			{				xVelocity+=accelleration;			}			if ((keysDown[Keyboard.LEFT])&&(xVelocity > maxReverseVelocity)) 			{				xVelocity-=accelleration;			}			if (xVelocity>0) 			{				xVelocity-=friction;			}			if (xVelocity<0) 			{				xVelocity+=friction;			}		}				public function jump():void {								if(keysDown[Keyboard.UP] && jumping!=true) {				jumping=true;				yVelocity=yAccelleration;			}						this.x+=xVelocity;			this.y-=yVelocity						if (xVelocity>0) 			{				xVelocity-=friction;			}			if (xVelocity<0) 			{				xVelocity+=friction;			}						if (yVelocity > 0) {					jumpState = "going up";									}				else {					jumpState = "going down";				}						yVelocity-=gravity;						if(yVelocity < minYAccelleration)			{				yVelocity = minYAccelleration;			}			if(yVelocity > maxYAccelleration)			{				yVelocity = maxYAccelleration;			}		}				public function stopJumping() {						yVelocity = 0;			jumpState = "still";			jumping = false;		}						public function get isDead():Boolean		{			return _isDead;		}				public function set isDead(value:Boolean):void		{			_isDead = value;		}					}			}